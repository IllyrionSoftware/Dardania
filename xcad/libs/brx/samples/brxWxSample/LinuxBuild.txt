BRX Linux GuideLines
====================

This BRX sample is also enabled for BRX Linux build
(BRX V11 and higher, focusing V19).

The CodeBlocks workspace file "Sample.workspace" and project file
"Sample.cbp" have been converted by CodeBlocks 10.05, from MS Visual Studio
files "Sample.sln" and "Sample.vcproj".

The CodeBlocks workspace contains build configurations for Debug + Release / x86 + x64,
for BRX 19.

Currently, the COM and the GUI part of the Sample project can not yet be
compiled under Linux, related code parts are disabled by
  #ifdef _WIN32 // Windows only
  #endif

Additionally, the related .cpp and .h files are excluded from compilation,
in the Linux CodeBlocks project.


Adopting the BRX Sample for Linux :
-----------------------------------
The main change to get the BRX project Linux-enabled :
in StdAfx.h, the Linux Platform support is provided by

  #ifndef _WIN32 // Linux,Mac
    #include "brx_platform_linux.h"
  #endif // !_WIN32

in the beginning of StdAfx.h - the only significant change.

All other usual Windows-specific code parts are managed by BRX "Platform
Emulation Layer", which provides most Windows mechanisms for Linux also :
as example, DllMain() function also operates in the expected way under
Linux environment;
same applies for "Extension DLLs" and resource handling etc.


Using this Linux sample project :
---------------------------------
your .profile file in home folder should define, where BRX 19
SDK is located on disk, by declaring these environment variables :
export BRX19_SDK_PATH="<full path to BRX 19 main folder>"

Example :
export BRX19_SDK_PATH="/media/E_DRIVE/BRX_19"
(taken from a VirtualMachine - pathes on a shared drive)


Important hint + tricks for Linux builds :
------------------------------------------
Compiler :
----------
Compared to usual Windows project settings, there is 1 extra folder
which needs to be included for Linux build, as "Compiler Search Folder" :
  $(BRX19_SDK_PATH)/inc/Platform/substitutes
This folder contains empty "fake" headers of most commonly used Windows
headers, to prevent heavy changes to BRX source code.
Example :
#include "atlcom.h"
would fail under Linux, but /inc/Platform/substitutes contains such an
empty ("fake") header file, to keep the compiler succeeding.

Linker :
--------
For the Linker, the static library "libdrx_entrypoint.a" needs to be
specially declared, to get all exports provided by "libdrx_entrypoint.a"
being re-exported from target module, for x86:
  -Wl,-whole-archive $(BRX19_SDK_PATH)/lib32/libdrx_entrypoint.a -Wl,-no-whole-archive
and for x64 respectively:
  -Wl,-whole-archive $(BRX19_SDK_PATH)/lib64/libdrx_entrypoint.a -Wl,-no-whole-archive
are declared as Linker options in related build configurations.

PreCompiled Header :
--------------------
we suggest to use PCH option
  "Generate PCH in a directory alongside original header"
This creates an extra folder, containing 1 PCH file (*.gch) for each build
configuration, which allows to have many build confiruations side-by-side,
without name-clash of PCH files.

To enable "Precompiled Header" mechanism, select the usual "stdafx.h" file,
use right-click contextmenu and select "Properties" :
here you can switch to "Build" tab and check the "Compile file" option,
then additionally set "Priority weight" to 0 - then, "stdafx.h" is recognised
as the PCH trigger file, and compiled first.


Loading "Sample.lrx" BRX module :
---------------------------------
after successful compilation, you will find "Sample.lrx" (Linux Runtime eXtension)
generated in output folder - copy into BricsCAD program folder, and load by
  (arxload "Sample.lrx")
You will see a printed message in commandline listing available commands.
