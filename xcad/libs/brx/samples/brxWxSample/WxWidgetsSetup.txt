WxWidgets GuideLines
====================

This sample illustrates the use of WxWidgets for cross-platform user interface development.
The sample was created with WxWidgets v3.0.2 and tested on Bricscad Windows V14 to V19 (x86 and x64), Bricscad Linux V16 to V19 (x64) and Autocad Windows 2013 to 2016 (x64).
The sample illustrates the use of compiled xrc resources. See wxres_xrc.txt file added to Visual Studio and CodeBlocks projects.

To setup WxWidgets, follow the steps below:


Windows OS:
-----------
1. Download WxWidgets sources. For v3.0.2 use this URL: https://github.com/wxWidgets/wxWidgets/releases/download/v3.0.2/wxWidgets-3.0.2.zip .
   Note that the Windows version cannot be compiled under Linux/Mac due to file format. So either use separate downloads or get the Linux/Mac sources and compile them under Windows, too.
2. Define WXWIDGETS30_PATH environment variable to point to WxWidgets sources folder. (Restart Visual Studio.)
3. The CAD extension (brx/arx module) may need to be built with different compilers/toolsets for different CAD versions.
   Build WxWidgets with the same VS version(s) used for building the CAD extension module(s). Follow the steps below for each required VS version:
    3.1. Open appropriate solution from: $(WXWIDGETS30_PATH)/build/msw/wx_vcXX.sln. See Note 1 for XX versions list.
    3.2. Build "Release" solution configuration for one/both of Win32/x64 solution platforms, depending on which platform(s) is(are) targeted.
         In case build errors are encountered, build again. Sometimes the projects build in improper dependency order.
         "Release" configuration generates static libraries.
    3.3. Build Win32/x64 "Release" configuration of $(WXWIDGETS30_PATH)/utils/wxrc/wxrc_vcX.vcxproj, where X is the latest available.
         This generates wxrc.exe utility needed for xrc resources compilation.
    3.4. Open $(WXWIDGETS30_PATH)/lib path and add VS compiler version to vc_YYYYlib folder name as vcXX0_YYYYlib, where YYYY is either empty string or x64_.
         Example: vc141_x64_lib for VS2017 x64 build. See Note 1 for XX version list.

4. Open Sample.sln. (It is created with VS 2017.)
5. Depending on the CAD application version, build Debug and/or Release configuration(s) for Sample-brxVV (14,15,16,17,18) and/or Sample-arxXXXX VC projects only (not the entire solution).
   See Note 2 for XXXX versions.


Note 1: Visual Studio 2005: XX ==  8
        Visual Studio 2008: XX ==  9
        Visual Studio 2010: XX == 10
        Visual Studio 2012: XX == 11
        Visual Studio 2013: XX == 12
        Visual Studio 2017: XX == 141
        
Note 2: Autocad 2013: XXXX == 19
        Autocad 2015: XXXX == 20
        Autocad 2016: XXXX == 20_1
        Autocad 2017: XXXX == 21

Note 3: Props: the Visual Studio projects of this sample use property sheets. These are .props files located in build/props folder.
        Each file stores project settings related to a certain library, e.g. wx30.props for WxWidgets 3.0.2., brx19.props for BRX 19 SDK.
        The .props files contain several user defined macros.
        For example, wx30.props has wxArchSuffix. This is a conditional macro. However, the condition is not exposed in VS GUI. It is set by opening the .props file with a text editor.
        Each brx/arx props file also has a wxMsvcVersion macro which defines the compiler version used to build the arx module. It is required to link with the proper wx libs.
        Also, each VS project has the platform toolset selected to be compatible with the CAD libraries. 

Note 4: For xrc resources compilation wxres_xrc.txt file is added to the VS project and set to perform a custom build step.

Linux OS:
-----------
1. Download WxWidgets sources and extract the archive. For v3.0.2 use this URL: https://github.com/wxWidgets/wxWidgets/releases/download/v3.0.2/wxWidgets-3.0.2.tar.bz2 .
2. Define WXWIDGETS30_PATH environment variable pointing to the extracted wxWidgets folder, e.g. in your ~/.profile and renew your session (login/logout).
3. For information, read this page: https://wiki.wxwidgets.org/Compiling_and_getting_started .
4. Open Terminal and create (mkdir) “build-gtk-release” folder inside WXWIDGETS30_PATH and go there (cd).
5. Use configure tool with the following parameters (change vendor value to own preference): 
  ../configure --prefix=$(pwd) --disable-shared  --disable-debug_flag --enable-optimise --enable-unicode --with-opengl --with-libjpeg=builtin --with-libpng=builtin --disable-compat28 --enable-vendor=lrx CFLAGS=-fPIC CXXFLAGS=-fPIC
6. Build using “make” or “make -j”.
7. Open Sample.workspace.
8. Build Debug_xXX and/or Release_xXX configuration.

Note 1: For xrc resources compilation the generate_xrc_inl.sh script is added and set to be executed as pre-build step in CodeBlocks project.
Note 2: For a debug build of WxWidgets, create build-gtk-debug folder and call configure tool without "--disable-debug_flag --enable-optimise" parameters, but with "--enable-debug". 

Mac OS:
-----------
1. Download WxWidgets sources and extract the archive. For v3.0.2 use this URL: https://github.com/wxWidgets/wxWidgets/releases/download/v3.0.2/wxWidgets-3.0.2.tar.bz2 .
2. Define WXWIDGETS30_PATH environment variable pointing to the extracted wxWidgets folder. See MacBuild.txt for how-to.
3. For information, read this page: https://wiki.wxwidgets.org/Compiling_wxWidgets_using_the_command-line_%28Terminal%29 .
4. Open Terminal and create (mkdir) “build-mac-release” folder inside WXWIDGETS30_PATH and go there (cd).
5. If MacOSX10.9 SDK is not installed with your Xcode, get Xcode 6.4 and copy SDK 10.9 to you SDKs folder, see below for example. WxWidgets 3.0.2 cannot be built properly with newer SDK versions (e.g. wxrc utility doesn’t get built).
6. Use configure tool with the following parameters (change vendor value to own preference): 
  ../configure --prefix=$(pwd) --disable-shared --disable-debug_flag --enable-unicode --enable-optimise --with-macosx-version-min=10.9 --with-macosx-sdk=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk --with-opengl --with-libjpeg=builtin --with-libpng=builtin --with-libiconv=builtin --disable-compat28 --enable-vendor=mrx CC=clang CXX=clang++ CXXFLAGS="-stdlib=libc++ -std=c++11" OBJCXXFLAGS="-stdlib=libc++ -std=c++11" LDFLAGS=-stdlib=libc++
7. Build using “make” or “make -j”. It is sometimes necessary to call make repeatedly to get all the binaries (e.g. libwx_baseu-3.0.a, wxrc) generated in the lib folder, especially when using “-j” option.
8. Open Sample.xcworkspace.
9. Build Debug and/or Release configuration of wxSample scheme.

Note 1: For xrc resources compilation the generate_xrc_inl.sh script is added and set to be executed as pre-build step in Xcode project.
Note 2: For a debug build of WxWidgets, create build-mac-debug folder and call configure tool without "--disable-debug_flag --enable-optimise" parameters, but with "--enable-debug". 

